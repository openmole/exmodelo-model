# write example network to file
sink("testNet.bn")
cat("targets, factors\n")
cat("Gene1, !Gene2 | !Gene3\n")
cat("Gene2, Gene3 & Gene4\n")
cat("Gene3, Gene2 & !Gene1\n")
cat("Gene4, 1\n")
sink()
net <- loadNetwork("testNet.bn")
print(net)
install.packages("BoolNet")
install.packages("XML")
install.packages("libxml2-dev")
install.packages("libxml2")
install.packages("libxml2-dev")
install.packages(c("dplyr", "ggplot2", "lattice", "MASS", "Matrix", "mgcv", "Rcpp", "rlang", "tidyr"))
install.packages("XML")
install.packages("BoolNet")
net <- loadNetwork("testNet.bn")
library(BoolNet)
net <- loadNetwork("testNet.bn")
print(net)
getAttractors(net)
net <- loadNetwork("testNet.bn")
getAttractors(net)
install.packages("rJava")
install.packages("JavaGD")
install.packages("CommonJavaJars")
proportion <- function(breed, population) {
return(breed/population*100)
}
proportion(50, 100)
installed.packages("tidyverse")
install.packages("tidyverse")
install.packages("httr")
install.packages("curl")
install.packages("tidyverse")
library(tidyverse)
plots <- mtcars %>%
split(.$cyl) %>%
map(~ggplot(., aes(mpg, wt)) + geom_point())
plots
paths <- stringr::str_c(names(plots), ".pdf")
pwalk(list(paths, plots), ggsave, path = getwd())
plot(cars)
getOption("repos")
install.packages("checkpoint")
library(checkpoint)
Sys.Date()
checkpoint(Sys.Date())
list1 <- vector("list", 3)
list1[[1]] <- 1
list1[[2]] <- 2
list1[[3]] <- 3
list2 <- vector("list", 3)
list1[[1]] <- 4
list1[[2]] <- 5
list1[[3]] <- 6
total <- list1 + list2
total <- c(unlist(list1), unlist(list2))
total
unlist(list1)
list1 <- vector("list", 3)
list1[[1]] <- 1
list1[[2]] <- 2
list1[[3]] <- 3
list2 <- vector("list", 3)
list2[[1]] <- 4
list2[[2]] <- 5
list2[[3]] <- 6
total <- c(unlist(list1), unlist(list2))
list1 <- vector("list", 2)
list1[[1]] <- c(1, 2, 3)
list1[[2]] <- c(4, 5, 6)
unlist(list1)
plot(rgamma(1000, shape = 240*240/(72*72), rate = 240/(72*72)))
plot(pgamma(1000, shape = 240*240/(72*72), rate = 240/(72*72)))
plot(dgamma(1000, shape = 240*240/(72*72), rate = 240/(72*72)))
density(dgamma(1000, shape = 240*240/(72*72), rate = 240/(72*72)))
density(rgamma(1000, shape = 240*240/(72*72), rate = 240/(72*72)))
hist(rgamma(1000, shape = 240*240/(72*72), rate = 240/(72*72)))
library(tidyverse)
library(stringr)
pathways <- read_tsv("~/Documents/BooleanModel/macrophagePolarization/SIGNOR_relationsResult_190121.tsv")
View(pathways)
pathways <- read_tsv("~/Documents/BooleanModel/macrophagePolarization/SIGNOR_relationsResult_190121.tsv") %>%
select(passive = ENTITYB, active = ENTITYA, effect = EFFECT, passiveType = TYPEB, activeType = TYPEA, mechanism = MECHANISM, residue = RESIDUE, direct = DIRECT, comment = SENTENCE, SIGNOR_ID)
pathways <- read_tsv("~/Documents/BooleanModel/macrophagePolarization/SIGNOR_relationsResult_190121.tsv") %>%
select(passive = ENTITYB, active = ENTITYA, effect = EFFECT, passiveType = TYPEB, activeType = TYPEA, mechanism = MECHANISM, residue = RESIDUE, direct = DIRECT, comment = SENTENCE, SIGNOR_ID) %>%
arrange(passive, effect)
library(BoolNet)
## Create model from file
net <- loadNetwork("networkSpec.txt")
## Create model from file
net <- loadNetwork("~/Documents/BooleanModel/macrophagePolarization/networkSpec.txt")
## Create model from file
net <- loadNetwork("~/Documents/BooleanModel/macrophagePolarization/networkSpec.txt")
print(net)
## Calculate the attractors
attractors <- getAttractors(net, type = "synchronous")
print(attractors)
plotNetworkWiring(net)
plotAttractors(attractors)
getTransitionTable(attractors)
synthesis <- read_file("~/Documents/BooleanModel/macrophagePolarization/SIGNOR_graphSynthesis.txt")
synthesis <- read_delim("~/Documents/BooleanModel/macrophagePolarization/SIGNOR_graphSynthesis.txt", delim = ";")
View(synthesis)
synthesis <- read_delim("~/Documents/BooleanModel/macrophagePolarization/SIGNOR_graphSynthesis.txt", delim = ";") %>%
select(source, target, effect, sourceCategory, targetCategory) %>%
arrange(target, -effect)
synthesis <- read_delim("~/Documents/BooleanModel/macrophagePolarization/SIGNOR_graphSynthesis.txt", delim = ";") %>%
select(source, target, effect, sourceCategory, targetCategory) %>%
arrange(target, -effect)
synthesis <- read_delim("~/Documents/BooleanModel/macrophagePolarization/SIGNOR_graphSynthesis.txt", delim = ";") %>%
select(source, target, effect, sourceCategory, targetCategory) %>%
arrange(target, -effect)
synthesis <- read_delim("~/Documents/BooleanModel/macrophagePolarization/SIGNOR_graphSynthesis.txt", delim = ";")
synthesis <- read_delim("~/Documents/BooleanModel/macrophagePolarization/SIGNOR_graphSynthesis.txt", delim = ";") %>%
select(source, target, effect, sourceCategory, targetCategory) %>%
arrange(target, effect)
synthesis <- read_delim("~/Documents/BooleanModel/macrophagePolarization/SIGNOR_graphSynthesis.txt", delim = ";") %>%
select(target, source, effect, sourceCategory, targetCategory) %>%
arrange(target, effect)
## Create model from file
net <- loadNetwork("~/Documents/BooleanModel/macrophagePolarization/networkSpec.txt")
print(net)
plotNetworkWiring(net)
## Calculate the attractors
attractors <- getAttractors(net, type = "synchronous")
print(attractors)
getAttractorSequence(attractors, 1)
simplifiedNet <- simplifyNetwork(net)
plotNetworkWiring(simplifiedNet)
attractors <- getAttractors(simplifiedNet, type = "synchronous")
print(attractors)
print(net)
print(simplifiedNet)
library(tidyverse)
library(stringr)
library(BoolNet)
# pathways <- read_tsv("~/Documents/BooleanModel/macrophagePolarization/SIGNOR_relationsResult_190121.tsv") %>%
#     select(passive = ENTITYB, active = ENTITYA, effect = EFFECT, passiveType = TYPEB, activeType = TYPEA, mechanism = MECHANISM, residue = RESIDUE, direct = DIRECT, comment = SENTENCE, SIGNOR_ID) %>%
#     arrange(passive, -effect)
synthesis <- read_delim("~/Documents/BooleanModel/macrophagePolarization/SIGNOR_graphSynthesis.txt", delim = ";") %>%
select(target, source, effect, sourceCategory, targetCategory) %>%
arrange(target, effect)
## Create model from file
net <- loadNetwork("~/Documents/BooleanModel/macrophagePolarization/networkSpec.txt")
plotNetworkWiring(net)
## Calculate the attractors
attractors <- getAttractors(net, type = "synchronous")
save(net, attractors, file = "~/Documents/BooleanModel/macrophagePolarization/SIGNOR_attractors.RData")
## Calculate the attractors
attractorsAsync <- getAttractors(net, type = "asynchronous")
simplifiedNet <- loadNetwork("~/Documents/BooleanModel/macrophagePolarization/networkReducedSpec.txt")
library(tidyverse)
library(stringr)
library(BoolNet)
simplifiedNet <- loadNetwork("~/Documents/BooleanModel/macrophagePolarization/networkReducedSpec.txt")
## Create model from file
net <- loadNetwork("~/Documents/BooleanModel/macrophagePolarization/networkSpec.txt")
## Create model from file
net <- loadNetwork("~/Documents/BooleanModel/macrophagePolarization/networkSpec.txt")
plotNetworkWiring(net)
attractorsSync <- getAttractors(net, type = "synchronous")
# attractorsAsync <- getAttractors(net, type = "asynchronous")
print(attractorsSync)
simplifiedNet <- loadNetwork("~/Documents/BooleanModel/macrophagePolarization/networkReducedSpec.txt")
attractorsSync <- getAttractors(simplifiedNet, type = "synchronous")
# attractorsAsync <- getAttractors(simplifiedNet, type = "asynchronous")
print(attractorsSync)
plotNetworkWiring(simplifiedNet)
simplifiedNet <- loadNetwork("~/Documents/BooleanModel/macrophagePolarization/networkReducedSpec.txt")
plotNetworkWiring(simplifiedNet)
simplifiedNet <- loadNetwork("~/Documents/BooleanModel/macrophagePolarization/networkReducedSpec.txt")
plotNetworkWiring(simplifiedNet)
attractorsSync <- getAttractors(simplifiedNet, type = "synchronous")
# attractorsAsync <- getAttractors(simplifiedNet, type = "asynchronous")
print(attractorsSync)
net <- loadNetwork("~/Documents/BooleanModel/macrophagePolarization/networkSpec.txt")
plotNetworkWiring(net)
## Calculate the attractors
attractorsSync <- getAttractors(net, type = "synchronous")
# attractorsAsync <- getAttractors(net, type = "asynchronous")
print(attractorsSync)
plotStateGraph(attractorsSync)
## Create model from file
net <- loadNetwork("~/Documents/BooleanModel/testBoolNet/networkSpec.txt")
plotNetworkWiring(net)
## Calculate the attractors
attractors <- getAttractors(net, type = "synchronous")
plotStateGraph(attractors)
print(attractors)
plotAttractors(attractors)
## Simplify network
simplifiedNet <- loadNetwork("~/Documents/BooleanModel/macrophagePolarization/networkReducedSpec.txt")
attractorsSync <- getAttractors(simplifiedNet, type = "synchronous")
plotStateGraph(attractorsSync)
plotStateGraph(attractorsSync, plotIt = F)
## Calculate the attractors
attractorsSync <- getAttractors(net, type = "synchronous")
graph_attr <- plotStateGraph(attractorsSync, plotIt = F)
View(graph_attr)
install.packages("igraph")
library(igraph)
graph_attr
## Create model from file
net <- loadNetwork("~/Documents/BooleanModel/macrophagePolarization/networkSpec.txt")
## Calculate the attractors
attractorsSync <- getAttractors(net, type = "synchronous")
library(tidyverse)
library(stringr)
library(BoolNet)
## Create model from file
net <- loadNetwork("~/Documents/BooleanModel/macrophagePolarization/networkSpec.txt")
## Calculate the attractors
attractorsSync <- getAttractors(net, type = "synchronous")
graph_attr <- plotStateGraph(attractorsSync, plotIt = F)
# attractorsAsync <- getAttractors(net, type = "asynchronous")
print(attractorsSync)
summary(attractorsSync)
install.packages("rgl")
library(rgl)
x <- sep.l <- iris$Sepal.Length
y <- pet.l <- iris$Petal.Length
z <- sep.w <- iris$Sepal.Width
rgl.open()# Open a new RGL device
rgl.bg(color = "white") # Setup the background color
rgl.spheres(x, y, z, r = 0.2, color = "grey")
setwd("/home/helene/Documents/OpenMOLE/exmodelo/zombies/scala/ode")
library(tidyverse)
library(stringr)
data <- read_csv("realData.csv")
data <- read_csv(file = "realData.csv")
data <- read.csv(file = "realData.csv")
View(data)
data <- read_delim("realData.txt", delim = "\t")
View(data)
miseEnForme <- data %>%
gather(key = "type", value = "incidence", everything())
View(miseEnForme)
miseEnForme <- data %>%
gather(key = "type", value = "incidence", everything()) %>%
spread(type, incidence)
View(miseEnForme)
miseEnForme <- data %>%
gather(key = "type", value = "incidence", everything())
miseEnForme <- data %>%
gather(key = "type", value = "incidence", everything()) %>%
mutate(time = c(0:49, 0:49))
miseEnForme <- data %>%
gather(key = "type", value = "incidence", everything()) %>%
mutate(time = c(0:49, 0:49),
pop = c(rep("humans", 50), rep("zombies", 50)))
miseEnForme <- data %>%
gather(key = "type", value = "incidence", everything()) %>%
mutate(time = c(0:49, 0:49),
pop = c(rep("humans", 50), rep("zombies", 50))) %>%
select(pop, time, incidence) %>%
spread(pop, incidence)
write_csv(miseEnForme, path = "realData.csv")
miseEnForme <- data %>%
gather(key = "type", value = "incidence", everything()) %>%
mutate(pop = c(rep("humans", 50), rep("zombies", 50))) %>%
select(-type) %>%
spread(pop, incidence)
miseEnForme <- data %>%
gather(key = "type", value = "incidence", everything()) %>%
mutate(pop = c(rep("humans", 50), rep("zombies", 50)))
miseEnForme <- data %>%
gather(key = "type", value = "incidence", everything()) %>%
mutate(pop = c(rep("humans", 50), rep("zombies", 50))) %>%
select(-type)
miseEnForme <- data %>%
gather(key = "type", value = "incidence", everything()) %>%
mutate(pop = c(rep("humans", 50), rep("zombies", 50))) %>%
select(-type) %>%
spread(pop, incidence)
miseEnForme <- data %>%
gather(key = "type", value = "incidence", everything()) %>%
mutate(time = c(0:49, 0:49),
pop = c(rep("humans", 50), rep("zombies", 50))) %>%
select(pop, time, incidence) %>%
spread(pop, incidence)
miseEnForme <- data %>%
gather(key = "type", value = "incidence", everything()) %>%
mutate(time = c(0:49, 0:49),
pop = c(rep("humans", 50), rep("zombies", 50))) %>%
select(-type) %>%
spread(pop, incidence) %>%
select(-time)
write_csv(miseEnForme, path = "realData.csv", col_names = F)
