import _root_.zombies.simulation._

val replication = Val[Int]
val id = Val[Int]
val worldid = Val[Int]

// model parameters
val infectionRange = Val[Double]
val humanRunSpeed = Val[Double]
val humanExhaustionProbability = Val[Double]
val humanFollowProbability = Val[Double]
val humanInformedRatio = Val[Double]
val humanInformProbability = Val[Double]
val humanFightBackProbability = Val[Double]
val humanPerception = Val[Double]
val humanMaxRotation = Val[Double]
val zombieRunSpeed = Val[Double]
val zombiePheromoneEvaporation = Val[Double]
val zombiePerception = Val[Double]
val zombieMaxRotation = Val[Double]
val humans = Val[Int]
val zombies = Val[Int]

// generator parameters
val worldSize = 40

val expMixtureCenters = Val[Double]
val expMixtureRadius = Val[Double]
val expMixtureThreshold = Val[Double]
val blocksNumber = Val[Double]
val blocksMinSize = Val[Double]
val blocksMaxSize = Val[Double]
val percolationProba = Val[Double]
val percolationBordPoints = Val[Double]
val percolationLinkWidth = Val[Double]

val genworld = Val[Array[Array[Double]]]

// outputs
val humansDynamic = Val[Array[Int]]
val zombiesDynamic = Val[Array[Int]]
val killedDynamic = Val[Array[Int]]
val zombifiedDynamic = Val[Array[Int]]
val goneDynamic = Val[Array[Int]]
val fleeDynamic = Val[Array[Int]]
val pursueDynamic = Val[Array[Int]]
val rescuedDynamic = Val[Array[Int]]


val model =
  ScalaTask("""
    import _root_.zombies._
    import _root_.zombies.worldgen._
    import _root_.zombies.simulation._
    import _root_.zombies.agent._

    val rng = new util.Random(replication)

    val simulation = Simulation.initialize(
      world = genworld,
      humans = humans,
      zombies = zombies,
      random = rng
    )

    val steps = 500

    val (simulations, events) = simulate(simulation, rng, steps)

    val humansDynamic = simulations.map(_.agents.collect(Agent.human).size).grouped(10).map(_.head).toArray
    val zombiesDynamic = simulations.map(_.agents.collect(Agent.zombie).size).grouped(10).map(_.head).toArray

    val rescuedDynamic = events.map(_.collect(Event.rescued).size).grouped(10).map(_.sum).toArray
    val killedDynamic = events.map(_.collect(Event.killed).size).grouped(10).map(_.sum).toArray
    val zombifiedDynamic = events.map(_.collect(Event.zombified).size).grouped(10).map(_.sum).toArray
    val fleeDynamic = events.map(_.collect(Event.flee).size).grouped(10).map(_.sum).toArray
    val pursueDynamic = events.map(_.collect(Event.pursue).size).grouped(10).map(_.sum).toArray
    val goneDynamic = events.map(_.collect(Event.gone).size).grouped(10).map(_.sum).toArray
  """) set (
    (inputs,outputs) += (replication,humans,zombies,id),
    inputs += (infectionRange, humanRunSpeed, humanExhaustionProbability, humanFollowProbability, humanInformedRatio, humanInformProbability, humanFightBackProbability, humanPerception, humanMaxRotation, humans, zombieRunSpeed, zombiePheromoneEvaporation, zombiePerception, zombieMaxRotation, zombies),
    inputs += (genworld),
    outputs += (humansDynamic, zombiesDynamic, killedDynamic, zombifiedDynamic, goneDynamic, fleeDynamic, pursueDynamic, rescuedDynamic),
    plugins += pluginsOf[_root_.zombies.simulation.Simulation],
    humans := 250,
    zombies := 4
  )


  val purpose = "ONEFACTOR_SPATIALSENS_PHASEDIAG_GRID"
  //val purpose = "TEST"

  val env = EGIEnvironment("vo.complex-systems.eu")
  //val env = LocalEnvironment(10)

  val indics_hook = AppendToCSVFileHook(workDirectory / "exploration" / ((new java.text.SimpleDateFormat("yyyyMMdd_HHmmss")).format(new java.util.Date()))+"_"+purpose+".csv") set (arraysOnSingleRow := true)


// onefactor with 3 steps -> 3^13 = 1594323 (too much) ; 2 steps : 8192 -> can do repetitions and more spatial sampling
val exploration = DirectSampling(
  evaluation = (model on env by 1000 hook indics_hook),
  //evaluation = (model on env hook indics_hook),
  sampling =
    (
    (OneFactorSampling(
    (infectionRange in (0.0 to 0.5 by 0.5)) nominal 0.25,
    (humanRunSpeed in (0.1 to 0.9 by 0.8)) nominal 0.5,
    (humanExhaustionProbability in (0.1 to 0.9 by 0.8)) nominal 0.5,
    (humanInformProbability in (0.1 to 0.9 by 0.8)) nominal 0.5,
    (humanFightBackProbability in (0.1 to 0.9 by 0.8)) nominal 0.5,
    (humanInformedRatio in (0.1 to 0.9 by 0.8)) nominal 0.5,
    (humanFollowProbability in (0.1 to 0.9 by 0.8)) nominal 0.5,
    (humanPerception in (0.1 to 3.0 by 2.9)) nominal 1.5,
    (humanMaxRotation in (5.0 to 90.0 by 85.0)) nominal 45.0,
    (zombieRunSpeed in (0.1 to 0.9 by 0.8)) nominal 0.5,
    (zombiePheromoneEvaporation in (0.0 to 1.0 by 1.0)) nominal 0.5,
    (zombiePerception in (0.1 to 3.0 by 2.9)) nominal 1.5,
    (zombieMaxRotation in (5.0 to 90.0 by 85.0)) nominal 45.0
    )
  ) withIndex id ) x
  (replication in (UniformDistribution[Int](10000) take 100))x//50)) x
  (
  (BlocksGridSpatialSampling(20,worldSize,
    blocksNumber in Range(1.0,20.0),
    blocksMinSize in Range(1.0,10.0),
    blocksMaxSize in Range(2.0,30.0),
    genworld
  ) ::
   ExpMixtureThresholdSpatialSampling(20,worldSize,
    expMixtureCenters in Range(1.0,10.0),
    expMixtureRadius in Range(1.0,20.0),
    expMixtureThreshold in Range(0.0,1.0),
    genworld
  ) ::
   (genworld is Array.fill(worldSize)(Array.fill(worldSize)(0.0))) // world set to jaude in zombies when array is empty
 ) withIndex worldid)
)


/*
PercolationGridSpatialSampling(20,worldSize,
    percolationProba in Range(0.1,1.0),
    percolationBordPoints in Range(1.0,30.0),
    percolationLinkWidth in Range(1.0,5.0),
    genworld
  )
*/



exploration







