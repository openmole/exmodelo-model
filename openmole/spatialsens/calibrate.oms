import _root_.zombies.simulation._

val seed = Val[Long]

// model parameters
// all at default except humans and zombies
val humans = Val[Int]
val zombies = Val[Int]

// generator parameters
// all are Double for LHS
val generatorType = Val[String]
val worldSize = Val[Int]
val randomDensity = Val[Double]
val expMixtureCenters = Val[Double]
val expMixtureRadius = Val[Double]
val expMixtureThreshold = Val[Double]
val blocksNumber = Val[Double]
val blocksMinSize = Val[Double]
val blocksMaxSize = Val[Double]
val percolationProba = Val[Double]
val percolationBordPoints = Val[Double]
val percolationLinkWidth = Val[Double]


// outputs
val oppFinalHumans = Val[Int]
val finalZombies = Val[Int]



def model(generator: String) =
  ScalaTask("""
    import _root_.zombies._
    import _root_.zombies.world._
    import _root_.zombies.simulation._
    import _root_.zombies.agent._
    import _root_.zombies.worldgen._

    val rng = new util.Random(seed)

    val world = closeWorld(generatorType match {
      case "jaude" => World.jaude
      case g => World(GridGeneratorLauncher(
          g,
          worldSize,
          randomDensity,
          expMixtureCenters.toInt,
          expMixtureRadius,
          expMixtureThreshold,
          blocksNumber.toInt,
          blocksMinSize.toInt,
          blocksMaxSize.toInt,
          percolationProba,
          percolationBordPoints.toInt,
          percolationLinkWidth
        ).getGrid(rng),worldSize)
    })

    val (_,_,_,moran,avgDistance,density,components,_,avgBlockArea,avgComponentArea,fullDilationSteps,fullErosionSteps) = Morphology(world).toTuple

    val simulation = Simulation.initialize(
      world = world,
      humans = humans,
      zombies = zombies,
      random = rng
    )

    val steps = 500

    val (simulations, events) = simulate(simulation, rng, steps)

    val oppFinalHumans = simulations.map(_.agents.collect(Agent.human).size).grouped(10).map(_.head).toArray.takeRight(1)(0)* -1
    val finalZombies = simulations.map(_.agents.collect(Agent.zombie).size).grouped(10).map(_.head).toArray.takeRight(1)(0)
    //val zombiesTimeSerie = simulations.map(_.agents.collect(Agent.zombie).size)
  """) set (
    (inputs,outputs) += (seed,humans,zombies),
    (inputs,outputs) += (generatorType,worldSize,randomDensity,expMixtureCenters,expMixtureRadius,expMixtureThreshold,
      blocksNumber,blocksMinSize,blocksMaxSize,percolationProba,percolationBordPoints,percolationLinkWidth),
    outputs += (oppFinalHumans, finalZombies),
    plugins += pluginsOf[_root_.zombies.simulation.Simulation],
    humans := 250,
    zombies := 4,
    worldSize := 40,
    generatorType := generator
  )

def calibrate(generator: String): DSL = {

  val evolution = 
    NSGA2Evolution(
      evaluation = model(generator),
      genome = Seq(
        //generatorType in Seq(generator),
        //generatorType in Seq("jaude","random","expMixture","blocks","percolation"),
        randomDensity in Range(0.0,1.0),
        expMixtureCenters in Range(1.0,10.0),
        expMixtureRadius in Range(1.0,20.0),
        expMixtureThreshold in Range(0.0,1.0),
        blocksNumber in Range(1.0,20.0),
        blocksMinSize in Range(1.0,10.0),
        blocksMaxSize in Range(2.0,30.0),
        percolationProba in Range(0.1,0.9),
        percolationBordPoints in Range(1.0,20.0),
        percolationLinkWidth in Range(1.0,5.0)),
      objectives = Seq(oppFinalHumans,finalZombies),
      //termination = 10,
      termination = 5000,
      parallelism = 100,
      distribution = Island(10 minutes),
      stochastic = Stochastic(seed = seed)
    )

  val purpose = "CALIB_GENERATORS_GRID"
  //val purpose = "TEST"

  val save = SavePopulationHook(evolution, workDirectory / "calibration" / ((new java.text.SimpleDateFormat("yyyyMMdd_HHmmss")).format(new java.util.Date()))+"_"+purpose+s"/${generator}", frequency = 100)

  val env = EGIEnvironment("vo.complex-systems.eu")
  //val env = LocalEnvironment(10)

  (evolution hook save on env)
}

EmptyTask() -- Seq("jaude","random","expMixture","blocks","percolation").map(calibrate)


