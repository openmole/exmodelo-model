import zombies._

val replication = Val[Int]
val id = Val[Int]

// model parameters
// all at default except humans and zombies
//val humans = Val[Int]
//val zombies = Val[Int]

// generator parameters
// all are Double for LHS
val generatorType = Val[String]
val worldSize = Val[Int]
val randomDensity = Val[Double]
val expMixtureCenters = Val[Double]
val expMixtureRadius = Val[Double]
val expMixtureThreshold = Val[Double]
val blocksNumber = Val[Double]
val blocksMinSize = Val[Double]
val blocksMaxSize = Val[Double]
val percolationProba = Val[Double]
val percolationBordPoints = Val[Double]
val percolationLinkWidth = Val[Double]


// outputs
val humansDynamic = Val[Array[Int]]
val zombiesDynamic = Val[Array[Int]]
val killedDynamic = Val[Array[Int]]
val zombifiedDynamic = Val[Array[Int]]
val goneDynamic = Val[Array[Int]]
val fleeDynamic = Val[Array[Int]]
val pursueDynamic = Val[Array[Int]]
val rescuedDynamic = Val[Array[Int]]

// morphological indicators
val moran = Val[Double]
val avgDistance = Val[Double]
val density = Val[Double]
val components = Val[Double]
//val avgDetour = Val[Double] // not computed - no graph lib
val avgBlockArea = Val[Double]
val avgComponentArea = Val[Double]
val fullDilationSteps = Val[Double]
val fullErosionSteps = Val[Double]




val model =
  ScalaTask("""
    import zombies._
    import zombies.worldgen._

    val rng = new util.Random(replication)

    val world = closeWorld(generatorType match {
      case "jaude" => jaude
      case g => zombies.world.World(GridGeneratorLauncher(
          g,
          worldSize,
          randomDensity,
          expMixtureCenters.toInt,
          expMixtureRadius,
          expMixtureThreshold,
          blocksNumber.toInt,
          blocksMinSize.toInt,
          blocksMaxSize.toInt,
          percolationProba,
          percolationBordPoints.toInt,
          percolationLinkWidth
        ).getGrid(rng),worldSize)
    })

    val (_,_,_,moran,avgDistance,density,components,_,avgBlockArea,avgComponentArea,fullDilationSteps,fullErosionSteps) = Morphology(world).toTuple

    val result = zombieInvasion(
      world = world,
      zombies = 4,
      humans = 250,
      steps = 500,
      random = rng
    )

    val humansDynamic = result.humansDynamic(20)
    val zombiesDynamic = result.zombiesDynamic(20)
    val rescuedDynamic = result.rescuedDynamic(20)
  """) set (
    (inputs,outputs) += (replication,id),//,humans,zombies
    (inputs,outputs) += (generatorType,worldSize,randomDensity,expMixtureCenters,expMixtureRadius,expMixtureThreshold,
      blocksNumber,blocksMinSize,blocksMaxSize,percolationProba,percolationBordPoints,percolationLinkWidth),
    outputs += (humansDynamic, zombiesDynamic, rescuedDynamic),
    outputs += (moran,avgDistance,density,components,avgBlockArea,avgComponentArea,fullDilationSteps,fullErosionSteps),
    plugins += pluginsOf[zombies.agent.Agent]
  )


val purpose = "LHS_SPATIALSENS_REPLICATIONS_GRID"
//val purpose = "TEST"

val env = EGIEnvironment("vo.complex-systems.eu")
//val env = LocalEnvironment(10)

val indics_hook = CSVHook((workDirectory / "exploration" / (((new java.text.SimpleDateFormat("yyyyMMdd_HHmmss")).format(new java.util.Date()))+"_"+purpose+".csv")),arrayOnRow = true)


val exploration = DirectSampling(
    evaluation = (model on env by 100 hook indics_hook),
    //evaluation = (model hook indics_hook),
    sampling = ((((LHS(100,
          randomDensity in Range(0.0,1.0),
          expMixtureCenters in Range(1.0,10.0),
          expMixtureRadius in Range(1.0,20.0),
          expMixtureThreshold in Range(0.0,1.0),
          blocksNumber in Range(1.0,20.0),
          blocksMinSize in Range(1.0,10.0),
          blocksMaxSize in Range(2.0,30.0),
          percolationProba in Range(0.1,1.0),
          percolationBordPoints in Range(1.0,30.0),
          percolationLinkWidth in Range(1.0,5.0)
        )
        withIndex id)
      x (generatorType in Seq("random","expMixture","blocks","percolation"))
    ) :: (
      (randomDensity is 0.0)x(expMixtureCenters is 0.0)x(expMixtureRadius is 0.0)x(expMixtureThreshold is 0.0)x(blocksNumber is 0.0)x
    (blocksMinSize is 0.0)x(blocksMaxSize is 0.0)x(percolationProba is 0.0)x(percolationBordPoints is 0.0)x
    (percolationLinkWidth is 0.0)x(id is 0)x(generatorType is "jaude")
         )
     )
      x (worldSize is 40)
      x (replication in (UniformDistribution[Int](10000) take 100))
   )
)


  exploration
