import zombies._

// Model inputs
val humanFollowProbability = Val[Double]
val humanInformedRatio = Val[Double]
val humanInformProbability = Val[Double]

val seed = Val[Long]

// Model outputs
val humansDynamic = Val[Array[Int]]
val zombiesDynamic = Val[Array[Int]]
val rescuedDynamic = Val[Array[Int]]
val peakTime = Val[Double]
val peakSize = Val[Double]
val totalZombified = Val[Double]
val halfZombified = Val[Double]
val spatialMoranZombified = Val[Double]
val spatialDistanceMeanZombified = Val[Double]
val spatialEntropyZombified = Val[Double]
val spatialSlopeZombified = Val[Double]

val model =
  ScalaTask("""
    import zombies._
    
    val result = zombieInvasion(
      zombies = 4,
      humans = 250,
      steps = 500,
      random = Random(seed),
      
      humanFollowProbability = humanFollowProbability,
      humanInformedRatio = humanInformedRatio,
      humanInformProbability = humanInformProbability
    )
    
    val peakTime = result.peakTimeZombified(window = 5).toDouble
    val peakSize = result.peakSizeZombified(window = 5).toDouble
    val totalZombified = result.totalZombified.toDouble
    val halfZombified = result.halfZombified.toDouble
    val spatialMoranZombified = result.spatialMoranZombified
    val spatialDistanceMeanZombified = result.spatialDistanceMeanZombified
    val spatialEntropyZombified = result.spatialEntropyZombified
    val spatialSlopeZombified = result.spatialSlopeZombified
  """) set (
    inputs += (humanFollowProbability, humanInformedRatio, humanInformProbability, seed),
    outputs += (
      peakTime,peakSize,
      totalZombified,
      halfZombified,
      spatialMoranZombified,
      spatialDistanceMeanZombified,
      spatialEntropyZombified,
      spatialSlopeZombified
    ),
    plugins += pluginsOf[zombies.agent.Agent]
  )


DirectSampling(
  evaluation = 
    Replication(
      evaluation = model,
      seed = seed,
      sample = 10
   ),
  sampling = /*LHS(
      100,
      humanFollowProbability in (0.0,1.0),
      humanInformedRatio in (0.0,1.0),
      humanInformProbability in (0.0,1.0)
    ) */ 
    (humanFollowProbability in (0.0 to 1.0 by 0.5))
    x (humanInformedRatio in (0.0 to 1.0 by 0.5))
    x (humanInformProbability in (0.0 to 1.0 by 0.5))
) hook (workDirectory / "exploration.csv")




