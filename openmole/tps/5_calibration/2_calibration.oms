val humanFollowProbability = Val[Double]
val humanInformedRatio = Val[Double]
val humanInformProbability = Val[Double]

val seed = Val[Long]
val rescuedDynamic = Val[Array[Int]]

def distanceAVG(vs: Array[Array[Int]]): Double = {
  val averageData = Array(0, 2.64, 17.66, 31.73, 34.97, 28.4, 16.06, 7.49, 3.96, 1.84, 0.69, 0.41, 0.23, 0.06, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
  val simulated = vs.transpose.map(_.average)
  absoluteDistance(averageData, simulated)
}

val env = SLURMEnvironment("xxxxx", "myria.criann.fr", queue = "2tcourt", wallTime = 20 minutes, nTasks = 1, memory = 2500, workDirectory = "/tmp", reservation = "exModelo0624")

val model =
  ScalaTask("""
    import zombies._
    
    val rng = Random(seed)
  
    val result = zombieInvasion(
      humanFollowProbability = humanFollowProbability,
      humanInformedRatio = humanInformedRatio,
      humanInformProbability = humanInformProbability,
      zombies = 1,
      humans = 250,
      steps = 500,
      random = rng)
    
    val rescuedDynamic = result.rescuedDynamic()
  """) set (
    inputs += (seed, humanFollowProbability, humanInformedRatio, humanInformProbability),
    outputs += (rescuedDynamic),
    plugins += pluginsOf[zombies.agent.Agent]    
  )
  
NSGA2Evolution(
  evaluation = model,
  genome = Seq(
    humanInformedRatio in (0.0, 1.0),
    humanInformProbability in (0.0, 1.0),
    humanFollowProbability in (0.0, 1.0)
  ),
  objective = Seq(rescuedDynamic aggregate distanceAVG),
  termination = 100000,
  parallelism = 200,
  distribution = Island(5 minutes),
  stochastic = Stochastic(seed = seed)
) hook (workDirectory / "results/", frequency = 100) on env


