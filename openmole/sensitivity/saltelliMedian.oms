import zombies._

// Model inputs
val humanFollowProbability = Val[Double]
val humanInformedRatio = Val[Double]
val humanInformProbability = Val[Double]

// Model outputs
val peakTime = Val[Double]
val peakSize = Val[Double]
val totalZombified = Val[Double]
val halfZombified = Val[Double]
val spatialMoranZombified = Val[Double]
val spatialDistanceMeanZombified = Val[Double]
val spatialEntropyZombified = Val[Double]
val spatialSlopeZombified = Val[Double]

val model =
  ScalaTask("""
    import zombies._

    val rng = new scala.util.Random

    val result = zombieInvasion(
      humanFollowProbability = humanFollowProbability,
      humanInformedRatio =humanInformedRatio,
      humanInformProbability = humanInformProbability,
      zombies = 4,
      humans = 250,
      steps = 500,
      random = rng)

    val peakTime = result.peakTimeZombified(window = 5).toDouble
    val peakSize = result.peakSizeZombified(window = 5).toDouble
    val totalZombified = result.totalZombified.toDouble
    val halfZombified = result.halfZombified.toDouble
    val spatialMoranZombified = result.spatialMoranZombified
    val spatialDistanceMeanZombified = result.spatialDistanceMeanZombified
    val spatialEntropyZombified = result.spatialEntropyZombified
    val spatialSlopeZombified = result.spatialSlopeZombified
  """) set (
    inputs += (humanFollowProbability, humanInformedRatio, humanInformProbability),
    outputs += (peakTime,peakSize,totalZombified,halfZombified,spatialMoranZombified,spatialDistanceMeanZombified,spatialEntropyZombified,spatialSlopeZombified),//,spatialRipleyZombified),
    plugins += pluginsOf[zombies.agent.Agent]
  )

val purpose = "SALTELLI_MEDIAN"
val resdir = (workDirectory / "sensitivity" / (((new java.text.SimpleDateFormat("yyyyMMdd_HHmmss")).format(new java.util.Date()))+"_"+purpose))

val seed = Val[Int]

val replications = Replication(
  evaluation = model, // the model to run
  seed = seed, // the seed variable
  replications = 10 // the number of runs
)

// Model outputs
val peakTimeMedian = Val[Double]
val peakSizeMedian = Val[Double]
val totalZombifiedMedian = Val[Double]
val halfZombifiedMedian = Val[Double]
val spatialMoranZombifiedMedian = Val[Double]
val spatialDistanceMeanZombifiedMedian = Val[Double]
val spatialEntropyZombifiedMedian = Val[Double]
val spatialSlopeZombifiedMedian = Val[Double]

val medianTask =
  ScalaTask("""val peakTimeMedian = peakTime.median
val peakSizeMedian = peakSize.median
val totalZombifiedMedian = totalZombified.median
val halfZombifiedMedian = halfZombified.median
val spatialMoranZombifiedMedian = spatialMoranZombified.median
val spatialDistanceMeanZombifiedMedian = spatialDistanceMeanZombified.median
val spatialEntropyZombifiedMedian = spatialEntropyZombified.median
val spatialSlopeZombifiedMedian = spatialSlopeZombified.median
""") set (
    inputs += (peakTime.array,peakSize.array,totalZombified.array,halfZombified.array,spatialMoranZombified.array,spatialDistanceMeanZombified.array,spatialEntropyZombified.array,spatialSlopeZombified.array),//,spatialRipleyZombified),
    outputs += (peakTimeMedian,peakSizeMedian,totalZombifiedMedian,halfZombifiedMedian,spatialMoranZombifiedMedian,spatialDistanceMeanZombifiedMedian,spatialEntropyZombifiedMedian,spatialSlopeZombifiedMedian),//,spatialRipleyZombified),
  ) 

val modelMedian = replications >- medianTask

val sen = SensitivitySaltelli(
    evaluation = modelMedian,
    inputs = Seq(humanFollowProbability in (0.0,1.0), humanInformedRatio in (0.0,1.0),humanInformProbability in (0.0,1.0)),
    outputs = Seq(peakTimeMedian, peakSizeMedian, totalZombifiedMedian,halfZombifiedMedian, spatialMoranZombifiedMedian,spatialDistanceMeanZombifiedMedian,spatialEntropyZombifiedMedian,spatialSlopeZombifiedMedian),
    samples = 1000
)

//val env =
//  SLURMEnvironment(
//    "gchere01",
//    "myria.criann.fr",
//    queue = "2tcourt",
//    workDirectory = "/tmp",
//    nTasks = 1,
//    memory = 3 gigabytes,
//    reservation= "exModelo0624",
//    wallTime = 15 minutes
//  )

val env = EGIEnvironment("vo.complex-systems.eu")

sen on env by 200 hook resdir

